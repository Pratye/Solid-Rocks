// Generated by SolidPython 1.1.3 on 2025-02-13 18:15:41
$fn = 50;


union() {
	cube(size = [120, 80, 2]);
	translate(v = [52.5000000000, 35.0000000000, 2]) {
		cube(size = [15, 10, 2]);
	}
	translate(v = [10, 50, 2]) {
		union() {
			difference() {
				union() {
					translate(v = [0, 5, 0]) {
						cube(size = [5, 5, 1]);
					}
					translate(v = [10, 5, 0]) {
						cube(size = [5, 5, 1]);
					}
					translate(v = [0, 0, 0]) {
						cube(size = [5, 5, 1]);
					}
					translate(v = [10, 0, 0]) {
						cube(size = [5, 5, 1]);
					}
				}
				translate(v = [10, 0, 0]) {
					cube(size = [5, 5, 1]);
				}
			}
			translate(v = [10, 0, 0]) {
				color(alpha = 1.0000000000, c = "red") {
					cube(size = [5, 5, 1]);
				}
			}
		}
	}
	translate(v = [30, 50, 2]) {
		cube(size = [10, 5, 1]);
	}
	translate(v = [50, 10, 2]) {
		cube(size = [8, 4, 1]);
	}
	translate(v = [70, 10, 2]) {
		cube(size = [8, 8, 1]);
	}
	translate(v = [90, 10, 2]) {
		cube(size = [6, 6, 1]);
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from solid import *
from solid.utils import *

# ------------------------------------------------------------------------------
# Board Parameters (in millimeters)
# ------------------------------------------------------------------------------
board_length = 120
board_width = 80
board_thickness = 2

# Create the PCB as a simple rectangular plate
pcb = cube([board_length, board_width, board_thickness])

# ------------------------------------------------------------------------------
# Component Blocks
# ------------------------------------------------------------------------------

# 1. Microchip Block (instead of a full microcontroller, we show a generic microchip)
# Dimensions: 15 x 10 x 2 mm
microchip = cube([15, 10, 2])
# Place the microchip near the center of the board (on top surface)
microchip = translate([(board_length - 15) / 2, (board_width - 10) / 2, board_thickness])(microchip)

# 2. Wheatstone Bridge (for the strain gauge)
# We simulate this with four small resistor blocks arranged in a diamond.
# Each resistor is 5 x 5 x 1 mm.
resistor = cube([5, 5, 1])
# Build the bridge by placing four resistors in a 2x2 grid:
bridge_origin = [10, 50, board_thickness]  # starting position on the board
resistor1 = translate([0, 5, 0])(resistor)  # top left
resistor2 = translate([10, 5, 0])(resistor) # top right
resistor3 = translate([0, 0, 0])(resistor)   # bottom left
resistor4 = translate([10, 0, 0])(resistor)  # bottom right
bridge = union()(resistor1, resistor2, resistor3, resistor4)

# Replace one resistor with a strain gauge block (different color to indicate function)
# We'll replace the bottom right resistor with a red block.
strain_gauge_block = color("red")(cube([5, 5, 1]))
bridge = difference()(
    bridge,
    translate([10, 0, 0])(resistor)  # remove the bottom right resistor
)
bridge = union()(
    bridge,
    translate([10, 0, 0])(strain_gauge_block)
)
# Place the Wheatstone bridge on the board.
bridge = translate(bridge_origin)(bridge)

# 3. Instrumentation Amplifier (AD620) Block
# Dimensions: 10 x 5 x 1 mm
amp = cube([10, 5, 1])
amp = translate([30, 50, board_thickness])(amp)

# 4. Temperature Sensor (LM35) Block
# Dimensions: 8 x 4 x 1 mm
temp_sensor = cube([8, 4, 1])
temp_sensor = translate([50, 10, board_thickness])(temp_sensor)

# 5. Vibration Sensor (ADXL335 or MPU6050) Block
# Dimensions: 8 x 8 x 1 mm
vibration_sensor = cube([8, 8, 1])
vibration_sensor = translate([70, 10, board_thickness])(vibration_sensor)

# 6. Humidity Sensor (DHT22) Block
# Dimensions: 6 x 6 x 1 mm
humidity_sensor = cube([6, 6, 1])
humidity_sensor = translate([90, 10, board_thickness])(humidity_sensor)

# ------------------------------------------------------------------------------
# Combine all components onto the PCB
# ------------------------------------------------------------------------------
sensor_module = pcb + microchip + bridge + amp + temp_sensor + vibration_sensor + humidity_sensor

# ------------------------------------------------------------------------------
# Export the model to a SCAD file (use OpenSCAD to render and export as STL)
# ------------------------------------------------------------------------------
scad_render_to_file(sensor_module, 'sensor_module_prototype.scad', file_header='$fn = 50;')
 
 
************************************************/
